/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'

ext.buildDate = new SimpleDateFormat("yyyyMMdd").format( new Date())
ext.majorVersion = "2.7"

ext.assemblyDir = "${buildDir}/assembly"

ext.leinDir = "${assemblyDir}/${project.name}"

ext.finalTarName = "${project.name}-${majorVersion}.tgz"

repositories{
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

apply from: "etc/properties.gradle"
apply from: "etc/s3Upload.gradle"


task prepareDir(type: Copy){
  from( "." ){
    include( "*.clj" )
    include( "README-lein.md")
  }
  into leinDir
}

task copyLog4j(type: Copy){

  from ( "src" )
  into( "${leinDir}/src" )
}

task runLeiningen(dependsOn: [copyLog4j, prepareDir], type: Exec) {

  workingDir leinDir

  //temporary hack for teamcity
  def lein = "lein"
  if (new File("${rootDir}/lein").exists()){
      lein = "${rootDir}/lein"
  }
  if (System.getenv( "HTTP_CLIENT" )){
    environment "HTTP_CLIENT": System.getenv( "HTTP_CLIENT" )
  }
  commandLine lein,  'deps'
}

task buildTarball(type: Tar, dependsOn: runLeiningen){
  baseName = "${rootProject.name}-${project.majorVersion}"
  destinationDir = new File("${s3Upload.source}")
  compression = Compression.GZIP
  from( assemblyDir ){
    exclude( "target" )
  }
}


task createLatestFile(dependsOn: buildTarball) << {
    file( "${s3Upload.source}/latest.txt" ).write( "http://${s3Upload.destination}${finalTarName}" )
}

s3Upload.dependsOn createLatestFile
